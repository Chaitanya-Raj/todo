{"version":3,"sources":["components/input.js","components/todo.js","components/list.js","App.js","serviceWorker.js","index.js"],"names":["Input","content","contentChange","handleSubmit","onSubmit","type","name","id","value","onChange","Todo","todo","deleteTodo","updateTodo","toggleComplete","bg","completed","strike","text","useRef","className","onClick","role","aria-label","html","current","onBlur","e","evt","target","tagName","spellCheck","List","todos","setTodos","hide","length","display","updatedTodo","find","map","filter","console","log","innerText","list","setList","key","style","App","useState","localStorage","JSON","parse","setContent","useEffect","setItem","stringify","preventDefault","Math","floor","random","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f421437e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Input = ({ content, contentChange, handleSubmit }) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"content\"\r\n          id=\"content\"\r\n          value={content}\r\n          onChange={contentChange}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useRef } from \"react\";\r\nimport ContentEditable from \"react-contenteditable\";\r\n\r\nconst Todo = ({ todo, deleteTodo, updateTodo, toggleComplete }) => {\r\n  const bg = todo.completed ? \"darken\" : null;\r\n  const strike = todo.completed ? \"completed\" : null;\r\n\r\n  const text = useRef(todo.content);\r\n\r\n  const handleChange = (evt) => {\r\n    text.current = evt.target.value;\r\n  };\r\n\r\n  return (\r\n    <div className={`list-item ${bg}`}>\r\n      <button onClick={() => toggleComplete(todo.id)}>\r\n        <span role=\"img\" aria-label=\"mark-complete\" id=\"mark-complete\">\r\n          &#9989;\r\n        </span>\r\n      </button>\r\n      <ContentEditable\r\n        className={`content ${strike}`}\r\n        html={text.current}\r\n        onBlur={(e) => updateTodo(e, todo.id)}\r\n        onChange={handleChange}\r\n        tagName=\"p\"\r\n        spellCheck=\"false\"\r\n      ></ContentEditable>\r\n      <button onClick={() => deleteTodo(todo.id)}>\r\n        <span role=\"img\" aria-label=\"mark-delete\" id=\"mark-delete\">\r\n          &#10060;\r\n        </span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { ReactSortable } from \"react-sortablejs\";\r\nimport Todo from \"./todo\";\r\n\r\nconst List = ({ todos, setTodos }) => {\r\n  const hide = todos.length === 0 ? { display: \"none\" } : null;\r\n\r\n  const toggleComplete = (id) => {\r\n    let updatedTodo = todos.find((todo) => todo.id === id);\r\n    updatedTodo.completed = !updatedTodo.completed;\r\n    setTodos(todos.map((todo) => (todo.id === id ? updatedTodo : todo)));\r\n  };\r\n\r\n  const deleteTodo = (id) => {\r\n    setTodos(todos.filter((todo) => id !== todo.id));\r\n  };\r\n\r\n  const updateTodo = (e, id) => {\r\n    console.log(e.target.innerText, id);\r\n    let updatedTodo = todos.find((todo) => todo.id === id);\r\n    updatedTodo.content = e.target.innerText;\r\n    setTodos(todos.map((todo) => (todo.id === id ? updatedTodo : todo)));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ReactSortable list={todos} setList={setTodos} className=\"list\">\r\n        {todos.map((todo) => (\r\n          <Todo\r\n            todo={todo}\r\n            deleteTodo={deleteTodo}\r\n            updateTodo={updateTodo}\r\n            toggleComplete={toggleComplete}\r\n            key={todo.id}\r\n          />\r\n        ))}\r\n      </ReactSortable>\r\n      <div className=\"list-item\" id=\"clear\" style={hide}>\r\n        <span\r\n          className=\"clear-completed\"\r\n          onClick={() => {\r\n            setTodos(todos.filter((todo) => !todo.completed));\r\n          }}\r\n        >\r\n          clear completed\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\nimport Input from \"./components/input\";\nimport List from \"./components/list\";\nimport \"./App.css\";\n\nfunction App() {\n  const [todos, setTodos] = useState(\n    localStorage.todos ? JSON.parse(localStorage.todos) : []\n  );\n  const [content, setContent] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const contentChange = (e) => {\n    setContent(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (content !== \"\")\n      setTodos([\n        ...todos,\n        { content, id: Math.floor(Math.random() * 1000), completed: false },\n      ]);\n    setContent(\"\");\n  };\n\n  return (\n    <div className=\"container\">\n      <header>\n        <span className=\"heading\">This is what I'm gonna do today</span>\n      </header>\n\n      <main>\n        <Input\n          content={content}\n          contentChange={contentChange}\n          handleSubmit={handleSubmit}\n        />\n        <List todos={todos} setTodos={setTodos} />\n      </main>\n      <footer>\n        made with{\" \"}\n        <span role=\"img\" aria-label=\"heart\" id=\"heart\">\n          &#10084;\n        </span>{\" \"}\n        by Chaitanya Raj\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}