{"version":3,"sources":["components/input.js","components/todo.js","components/list.js","App.js","serviceWorker.js","index.js"],"names":["Input","content","contentChange","handleSubmit","onSubmit","type","name","id","value","onChange","Todo","todo","deleteTodo","toggleComplete","onClick","role","aria-label","completed","className","List","todos","clearAll","hide","length","display","console","log","style","map","key","App","useState","localStorage","JSON","parse","setTodos","setContent","useEffect","setItem","stringify","e","target","preventDefault","Math","floor","random","filter","updatedTodo","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e178eac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Input = ({ content, contentChange, handleSubmit }) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"content\"\r\n          id=\"content\"\r\n          value={content}\r\n          onChange={contentChange}\r\n        />\r\n        <button type=\"submit\" id=\"add-todo-button\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nconst Todo = ({ todo, deleteTodo, toggleComplete }) => {\r\n  return (\r\n    <li>\r\n      <button onClick={() => toggleComplete(todo.id)}>\r\n        <span role=\"img\" aria-label=\"mark-complete\" id=\"mark-complete\">\r\n          &#9989;\r\n        </span>\r\n      </button>\r\n      {todo.completed ? (\r\n        <p className=\"content completed\">\r\n          <strike>{todo.content}</strike>\r\n        </p>\r\n      ) : (\r\n        <p className=\"content\">{todo.content}</p>\r\n      )}\r\n      <button onClick={() => deleteTodo(todo.id)}>\r\n        <span role=\"img\" aria-label=\"mark-delete\" id=\"mark-delete\">\r\n          &#10060;\r\n        </span>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./todo\";\r\n\r\nconst List = ({ todos, deleteTodo, toggleComplete, clearAll }) => {\r\n  const hide = todos.length === 0 ? { display: \"none\" } : null;\r\n  console.log(todos.length, hide);\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li id=\"clear\" style={hide}>\r\n          <span className=\"clear-all\" onClick={clearAll}>\r\n            clear all\r\n          </span>\r\n        </li>\r\n        {todos.map((todo) => (\r\n          <Todo\r\n            todo={todo}\r\n            deleteTodo={deleteTodo}\r\n            toggleComplete={toggleComplete}\r\n            key={todo.id}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\nimport Input from \"./components/input\";\nimport List from \"./components/list\";\nimport \"./App.css\";\n\nfunction App() {\n  const [todos, setTodos] = useState(\n    localStorage.todos ? JSON.parse(localStorage.todos) : []\n  );\n  const [content, setContent] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n    console.log(JSON.parse(localStorage.todos));\n  }, [todos]);\n\n  const clearAll = () => {\n    setTodos([]);\n  };\n\n  const contentChange = (e) => {\n    setContent(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (content !== \"\")\n      setTodos([\n        ...todos,\n        { content, id: Math.floor(Math.random() * 1000), completed: false },\n      ]);\n    setContent(\"\");\n  };\n\n  const toggleComplete = (id) => {\n    let updatedTodo = todos.find((todo) => todo.id === id);\n    updatedTodo.completed = !updatedTodo.completed;\n    setTodos(todos.map((todo) => (todo.id === id ? updatedTodo : todo)));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter((todo) => id !== todo.id));\n  };\n\n  return (\n    <div className=\"container\">\n      <header>\n        <span className=\"heading\">This is what I'm gonna do today</span>\n      </header>\n\n      <main>\n        <Input\n          content={content}\n          contentChange={contentChange}\n          handleSubmit={handleSubmit}\n        />\n        <List\n          todos={todos}\n          deleteTodo={deleteTodo}\n          toggleComplete={toggleComplete}\n          clearAll={clearAll}\n        />\n      </main>\n      <footer>\n        made with{\" \"}\n        <span role=\"img\" aria-label=\"heart\" id=\"heart\">\n          &#10084;\n        </span>{\" \"}\n        by Chaitanya Raj\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}